name: Create Release on PR Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main # Only run on PRs merged into the 'main' branch

jobs:
  create-release:
    # Only run this job if the PR was actually merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      # Required to read/write contents (for tagging) and create releases.
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags to correctly determine the next version
          fetch-depth: 0

      - name: Determine Version Bump Type
        id: bump_type
        # We pass the labels as a JSON string into the shell environment
        env:
          LABELS: ${{ toJSON(github.event.pull_request.labels) }}
        run: |
          echo "All labels: $LABELS"
          BUMP="patch" # Default to patch
          
          # We use the 'jq' command to parse the JSON and check for label names.
          # The '-e' flag makes jq exit with a status code of 0 if the filter produces output, perfect for 'if' conditions.
          if echo "$LABELS" | jq -e 'map(.name) | contains(["semver:major"])' > /dev/null; then
            BUMP="major"
          elif echo "$LABELS" | jq -e 'map(.name) | contains(["semver:minor"])' > /dev/null; then
            BUMP="minor"
          fi
          
          echo "Determined bump type: $BUMP"
          echo "BUMP_TYPE=${BUMP}" >> $GITHUB_OUTPUT

      - name: Get New Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: "none" # We control the bump type ourselves now
          release_branches: "main"
          # Here we use the output from our corrected step above
          custom_release_rules: ":${{ steps.bump_type.outputs.BUMP_TYPE }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The tag_name is the output from the previous step
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          # The release name is the same as the tag
          name: "Release ${{ steps.tag_version.outputs.new_tag }}"
          # Use the PR title and body for the release notes
          body: |
            ## Release from Pull Request #${{ github.event.pull_request.number }}
            **Title:** ${{ github.event.pull_request.title }}
            
            ${{ github.event.pull_request.body }}
          # Mark it as a pre-release if the PR was a draft, otherwise a full release
          prerelease: ${{ github.event.pull_request.draft }}